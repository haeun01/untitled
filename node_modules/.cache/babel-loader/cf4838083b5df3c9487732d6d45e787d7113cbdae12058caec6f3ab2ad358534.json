{"ast":null,"code":"import axios from \"axios\";\n\n// api.js\n\n// 로그아웃 함수\nexport const userLogout = () => {\n  // 세션 스토리지에서 사용자 정보 삭제\n  sessionStorage.clear();\n\n  // 로그아웃 후 홈페이지로 리다이렉트\n  window.location.href = \"/\";\n\n  // 필요하다면 서버에 로그아웃 요청을 보낼 수 있습니다.\n  // 아래 주석을 해제하고 실제 API 엔드포인트로 수정하세요.\n  /*\n  return fetch('/api/logout', {\n    method: 'POST',\n    credentials: 'include'\n  }).then(response => {\n    if (response.ok) {\n      window.location.href = '/';\n    }\n  }).catch(error => {\n    console.error('Logout failed:', error);\n  });\n  */\n};\n\n// 로그인 함수 (예시)\nexport const userLogin = (username, password) => {\n  // 실제 구현에서는 서버에 로그인 요청을 보내야 합니다.\n  // 아래는 예시일 뿐이며, 실제 로직으로 대체해야 합니다.\n  return new Promise((resolve, reject) => {\n    if (username && password) {\n      // 임시로 세션 스토리지에 사용자 정보 저장\n      sessionStorage.setItem(\"user\", JSON.stringify({\n        username\n      }));\n      resolve({\n        success: true,\n        message: \"Login successful\"\n      });\n    } else {\n      reject({\n        success: false,\n        message: \"Invalid credentials\"\n      });\n    }\n  });\n};\n\n// 사용자 정보 가져오기 함수 (예시)\nexport const getUserInfo = () => {\n  // 세션 스토리지에서 사용자 정보 가져오기\n  const userInfo = sessionStorage.getItem(\"user\");\n  return userInfo ? JSON.parse(userInfo) : null;\n};\n\n// 여기에 필요한 다른 API 함수들을 추가할 수 있습니다.\n// 예: 회원가입, 프로필 업데이트, 데이터 fetch 등","map":{"version":3,"names":["axios","userLogout","sessionStorage","clear","window","location","href","userLogin","username","password","Promise","resolve","reject","setItem","JSON","stringify","success","message","getUserInfo","userInfo","getItem","parse"],"sources":["/Users/kimjunhoe/untitled/src/Component/api.js"],"sourcesContent":["import axios from \"axios\";\n\n// api.js\n\n// 로그아웃 함수\nexport const userLogout = () => {\n  // 세션 스토리지에서 사용자 정보 삭제\n  sessionStorage.clear();\n\n  // 로그아웃 후 홈페이지로 리다이렉트\n  window.location.href = \"/\";\n\n  // 필요하다면 서버에 로그아웃 요청을 보낼 수 있습니다.\n  // 아래 주석을 해제하고 실제 API 엔드포인트로 수정하세요.\n  /*\n  return fetch('/api/logout', {\n    method: 'POST',\n    credentials: 'include'\n  }).then(response => {\n    if (response.ok) {\n      window.location.href = '/';\n    }\n  }).catch(error => {\n    console.error('Logout failed:', error);\n  });\n  */\n};\n\n// 로그인 함수 (예시)\nexport const userLogin = (username, password) => {\n  // 실제 구현에서는 서버에 로그인 요청을 보내야 합니다.\n  // 아래는 예시일 뿐이며, 실제 로직으로 대체해야 합니다.\n  return new Promise((resolve, reject) => {\n    if (username && password) {\n      // 임시로 세션 스토리지에 사용자 정보 저장\n      sessionStorage.setItem(\"user\", JSON.stringify({ username }));\n      resolve({ success: true, message: \"Login successful\" });\n    } else {\n      reject({ success: false, message: \"Invalid credentials\" });\n    }\n  });\n};\n\n// 사용자 정보 가져오기 함수 (예시)\nexport const getUserInfo = () => {\n  // 세션 스토리지에서 사용자 정보 가져오기\n  const userInfo = sessionStorage.getItem(\"user\");\n  return userInfo ? JSON.parse(userInfo) : null;\n};\n\n// 여기에 필요한 다른 API 함수들을 추가할 수 있습니다.\n// 예: 회원가입, 프로필 업데이트, 데이터 fetch 등\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;;AAEA;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAC9B;EACAC,cAAc,CAACC,KAAK,CAAC,CAAC;;EAEtB;EACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,GAAG;;EAE1B;EACA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;EAC/C;EACA;EACA,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,IAAIJ,QAAQ,IAAIC,QAAQ,EAAE;MACxB;MACAP,cAAc,CAACW,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAS,CAAC,CAAC,CAAC;MAC5DG,OAAO,CAAC;QAAEK,OAAO,EAAE,IAAI;QAAEC,OAAO,EAAE;MAAmB,CAAC,CAAC;IACzD,CAAC,MAAM;MACLL,MAAM,CAAC;QAAEI,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAAsB,CAAC,CAAC;IAC5D;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAC/B;EACA,MAAMC,QAAQ,GAAGjB,cAAc,CAACkB,OAAO,CAAC,MAAM,CAAC;EAC/C,OAAOD,QAAQ,GAAGL,IAAI,CAACO,KAAK,CAACF,QAAQ,CAAC,GAAG,IAAI;AAC/C,CAAC;;AAED;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}