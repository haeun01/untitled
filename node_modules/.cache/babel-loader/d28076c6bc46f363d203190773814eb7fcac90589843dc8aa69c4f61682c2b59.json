{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\uC774\\uD558\\uC740\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\untitled\\\\src\\\\Component\\\\FeedCreate.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { SessionCurrent } from \"./SessionCurrent\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n    padding: 0 10%;\n`;\n_c = Container;\nconst ImgBox = styled.div`\n    width: 100%;\n    height: 400px;\n    border: 1px solid white;\n    display: flex;\n    justify-content: center;\n`;\n_c2 = ImgBox;\nconst Textarea = styled.textarea`\n    width: 100%;\n    padding: 5px;\n    background-color: black;\n    color: white;\n    border: 1px solid white;\n`;\n_c3 = Textarea;\nconst Button = styled.div`\n    background-color: white;\n    color: black;\n    padding: 10px 0;\n    text-align: center;\n    /* width: 100px; */\n    margin: auto;\n    cursor: pointer;\n`;\n_c4 = Button;\nexport function FeedCreate() {\n  _s();\n  const [imageSrc, setImageSrc] = useState(null);\n  const [imageByte, setImageByte] = useState(null);\n  const [imageSendFile, setImageSendFile] = useState(null);\n  const {\n    sessionUser\n  } = SessionCurrent();\n  function showFile(file) {\n    if (file) {\n      const imageUrl = URL.createObjectURL(file);\n      setImageSrc(imageUrl);\n    }\n  }\n  function convertImageToBytes(event) {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const arrayBuffer = reader.result;\n        const byteArray = new Uint8Array(arrayBuffer);\n        setImageByte(byteArray);\n        convertBytesToFile(byteArray);\n      };\n      reader.onerror = () => {\n        console.error(\"파일 읽기에 실패했습니다.\");\n      };\n      reader.readAsArrayBuffer(file);\n    }\n  }\n  function convertBytesToFile(byteArray) {\n    const blob = new Blob([byteArray]);\n    const file = new File([blob], 'default_filename.bin');\n    showFile(file);\n    setImageSendFile(file);\n  }\n  async function editBtnClick() {\n    if (imageSendFile != null) {\n      const formData = new FormData();\n      formData.append(\"file\", imageSendFile);\n      formData.append(\"user\", sessionUser);\n      formData.append(\"text\", text);\n      console.log(1, formData);\n      try {\n        const response = await axios.post(\"http://localhost:8080/api/feed\", formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data'\n          }\n        });\n        console.log(\"img\", response.data);\n      } catch (error) {\n        console.error(\"요청에 실패했습니다.\", error.response ? error.response.data : error.message);\n      }\n    } else {\n      alert(\"이미지 파일을 업로드해주세요.\");\n    }\n  }\n  let text;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: \"50px\",\n          fontWeight: \"bold\",\n          textAlign: \"center\",\n          margin: \"20px 0\"\n        },\n        children: \"\\uD53C\\uB4DC \\uC791\\uC131\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        id: \"fileInput\",\n        accept: \"image/*\",\n        onChange: e => {\n          convertImageToBytes(e);\n        },\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 116\n      }, this), /*#__PURE__*/_jsxDEV(ImgBox, {\n        children: imageSrc && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: imageSrc,\n          alt: \"Selected Image\",\n          style: {\n            maxHeight: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n        id: \"text\",\n        name: \"text\",\n        rows: \"5\",\n        placeholder: \"Enter Profile Text\",\n        required: true,\n        onChange: e => {\n          text = e.target.value;\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: () => {\n          editBtnClick();\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(FeedCreate, \"fwTx/R8zuQS55znmgZp1Uz1ZOpQ=\");\n_c5 = FeedCreate;\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ImgBox\");\n$RefreshReg$(_c3, \"Textarea\");\n$RefreshReg$(_c4, \"Button\");\n$RefreshReg$(_c5, \"FeedCreate\");","map":{"version":3,"names":["useState","styled","SessionCurrent","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","Container","div","_c","ImgBox","_c2","Textarea","textarea","_c3","Button","_c4","FeedCreate","_s","imageSrc","setImageSrc","imageByte","setImageByte","imageSendFile","setImageSendFile","sessionUser","showFile","file","imageUrl","URL","createObjectURL","convertImageToBytes","event","target","files","reader","FileReader","onload","arrayBuffer","result","byteArray","Uint8Array","convertBytesToFile","onerror","console","error","readAsArrayBuffer","blob","Blob","File","editBtnClick","formData","FormData","append","text","log","response","post","headers","data","message","alert","children","style","fontSize","fontWeight","textAlign","margin","fileName","_jsxFileName","lineNumber","columnNumber","type","id","accept","onChange","e","required","src","alt","maxHeight","name","rows","placeholder","value","onClick","_c5","$RefreshReg$"],"sources":["C:/Users/이하은/OneDrive/문서/GitHub/untitled/src/Component/FeedCreate.js"],"sourcesContent":["import { useState } from \"react\"\r\nimport styled from \"styled-components\"\r\nimport { SessionCurrent } from \"./SessionCurrent\"\r\nimport axios from \"axios\"\r\n\r\n\r\nconst Container = styled.div`\r\n    padding: 0 10%;\r\n`\r\nconst ImgBox = styled.div`\r\n    width: 100%;\r\n    height: 400px;\r\n    border: 1px solid white;\r\n    display: flex;\r\n    justify-content: center;\r\n`\r\nconst Textarea = styled.textarea`\r\n    width: 100%;\r\n    padding: 5px;\r\n    background-color: black;\r\n    color: white;\r\n    border: 1px solid white;\r\n`\r\nconst Button = styled.div`\r\n    background-color: white;\r\n    color: black;\r\n    padding: 10px 0;\r\n    text-align: center;\r\n    /* width: 100px; */\r\n    margin: auto;\r\n    cursor: pointer;\r\n`\r\n\r\nexport function FeedCreate(){\r\n    const [imageSrc, setImageSrc] = useState(null);\r\n    const [imageByte, setImageByte] = useState(null);\r\n    const [imageSendFile, setImageSendFile] = useState(null);\r\n    const { sessionUser } = SessionCurrent();\r\n\r\n    function showFile(file) {\r\n        if (file) {\r\n            const imageUrl = URL.createObjectURL(file);\r\n            setImageSrc(imageUrl);\r\n        }\r\n    }\r\n\r\n    function convertImageToBytes(event) {\r\n        const file = event.target.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = () => {\r\n                const arrayBuffer = reader.result;\r\n                const byteArray = new Uint8Array(arrayBuffer);\r\n                setImageByte(byteArray);\r\n                convertBytesToFile(byteArray);\r\n            };\r\n\r\n            reader.onerror = () => {\r\n                console.error(\"파일 읽기에 실패했습니다.\");\r\n            };\r\n\r\n            reader.readAsArrayBuffer(file);\r\n        }\r\n    }\r\n\r\n    function convertBytesToFile(byteArray) {\r\n        const blob = new Blob([byteArray]);\r\n        const file = new File([blob], 'default_filename.bin');\r\n        showFile(file);\r\n        setImageSendFile(file);\r\n    }\r\n\r\n    async function editBtnClick() {\r\n        if(imageSendFile!=null){\r\n            const formData = new FormData();\r\n            formData.append(\"file\", imageSendFile);\r\n            formData.append(\"user\", sessionUser);\r\n            formData.append(\"text\", text);\r\n            console.log(1, formData)\r\n            try {\r\n                const response = await axios.post(\"http://localhost:8080/api/feed\", formData, {\r\n                    headers: {\r\n                        'Content-Type': 'multipart/form-data'\r\n                    }\r\n                });\r\n                console.log(\"img\",response.data);\r\n            } catch (error) {\r\n                console.error(\"요청에 실패했습니다.\", error.response ? error.response.data : error.message);\r\n            }\r\n        }else{\r\n            alert(\"이미지 파일을 업로드해주세요.\");\r\n        }\r\n    }\r\n\r\n    let text;\r\n\r\n    return <>\r\n        <Container>\r\n            <div style={{fontSize:\"50px\", fontWeight:\"bold\", textAlign:\"center\", margin:\"20px 0\"}}>피드 작성</div>\r\n            <input type=\"file\" id=\"fileInput\" accept=\"image/*\" onChange={(e)=>{convertImageToBytes(e)}} required /><br/>\r\n            <ImgBox>{imageSrc && <img src={imageSrc} alt=\"Selected Image\" style={{ maxHeight: '100%'}} />}</ImgBox>\r\n            <Textarea \r\n                id=\"text\" \r\n                name=\"text\" \r\n                rows=\"5\"\r\n                placeholder=\"Enter Profile Text\" \r\n                required\r\n                onChange={(e)=> {text = e.target.value}}\r\n            />\r\n            <Button onClick={()=>{editBtnClick()}}>Edit</Button>\r\n        </Container>\r\n    </>\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}